section.component-description
  section(id="introduction")
    p #[b Ремы, скейлинг, масштабирование] - прием в верстке, когда на определенных разрешениях интерфейс выглядит одинаково, все элементы уменьшаются/увеличиваются пропорционально ширине экрана (на видео для разрешений выше 1920px включены ремы).
    .component-description__video
      video(src="video/scaling-1.mp4#t=0.1", width="380", height="700", controls, playsinline)
    p Единица rem задает размер элемента относительно размера шрифта <html>, но в нашем случае она еще должна зависит от ширины экрана. Чтобы упросить и автоматизировать верстку на ремах, создаются функции scss и вводятся определенные правила для написания размеров в стилях.
  section(id="settings")
    h2.subtitle Настройка
    p 1. Подключается файл functions.scss, где прописываются функции для вьюпортов.
    .component-description__img
      img(src="img/content/scaling-1.png", width="680", height="318", alt="Демонстрация скейлинга")
    p 2. Создается #[b функция size()], в которую передается переменная $size-in-px: размер элемента в пикселях делится  значение шрифта, которое прописано для html (оно вынесено в переменную $fz-default), умножается на 1rem (чтобы получить в итоге значение в ремах).
    p 3. Создается функция #[b size-desktop()], которая отвечает за то, какое разрешение выбрано эталонным, и добавляет зависимость от изменения ширины вьюпорта.
    blockquote #[b Эталонное разрешение] - это то разрешение, которое взято за основу для скейлинга. На любом разрешении сайт будет выглядеть как на эталонном, только пропорционально больше/меньше.
    p 4. В файле #[b reboot.scss] у html переопределяем font-size под функции ремов с помощью функции #[b size-desktop()]. Функция служит исключительно для обозначения шрифтов в html, и больше на проекте нигде не используется.
    .component-description__img
      img(src="img/content/scaling-2.png", width="680", height="738", alt="Демонстрация скейлинга")
    p 5. Все значения, у которых единица измерения px, пишем в формате size().
    blockquote В том числе для #[b line-height] тега html.
    .component-description__img
      img(src="img/content/scaling-3.png", width="685", height="600", alt="Демонстрация скейлинга")
    blockquote Для #[b .container] также обязательно пропишите значения в size().
    .component-description__img
      img(src="img/content/scaling-4.png", width="680", height="495", alt="Демонстрация скейлинга")
    p Чтобы на разрешении ниже 1920 сайт вел себя как обычно, на нужных вьюпортах размер шрифта необходимо переопределить. Есть два варианта:
    ul
      li
        p для #[b @vp-1919] (который означает @media (max-width: 1919px)) переопределяются значения на обычные пиксельные прямо для тега html.
        .component-description__img
          img(src="img/content/scaling-5.png", width="685", height="741", alt="Демонстрация скейлинга")
        span Плюсы
        ul
          li более гибкая настройка масштабирования: мы можем какие-то элементы сделать фиксированными, а какие-то масштабируемыми;
          li в инспекторе все значение в пикселях.
        .component-description__img
          img(src="img/content/scaling-6.png", width="905", height="442", alt="Демонстрация скейлинга")
        span Минусы
          ul
            li переопределение занимает больше времени;
            li увеличивает количество кода.
  section(id="result")
    h2.subtitle Результат
    p После всех манипуляций у нас должен получится вот такая страница.
    .component-description__video
      video(src="video/scaling-2.mp4#t=0.1", width="380", height="700", controls, playsinline)
    p Обратите внимание, при разрешении 1920+ все элементы, все отступы, все бордеры пропорционально увеличиваются/уменьшаются, ниже 1920px сайт становится обычным “резиновым”. Если бы у нас не было ремов, сайт вел бы себя вот так:
    .component-description__video
      video(src="video/scaling-3.mp4#t=0.1", width="380", height="700", controls, playsinline)
  section(id="check")
    h2.subtitle Проверь себя
    p На пограничный точках перестроения размеры должны соответствовать макетным. Например, в макете на 1920px шрифт указан 24px. При адаптиве в точке 1920 шрифт также должен быть 24px.
  section(id="size")
    h2.subtitle Запись размеров
    p Главная особенность ремов: все пиксельные размеры должны быть прописаны в css по виду size(). Особенно это касается иконок svg и картинок. Иначе может получиться ситуация, что весь контент, написанный на ремах, увеличится, а картинка, у которой размеры не заданы, останется такой, какой и была
    .component-description__video
      video(src="video/scaling-4.mp4#t=0.1", width="380", height="700", controls, playsinline)
    p Если нужно вычислить, например, ширину с помощью calc(), то запись выглядит так:#[br] #[b width: calc((100% - \#{size(160px)}) / 2);] #[br]Не забывайте указывать в ремах значение ширины бордеров: #[b border: size(1px) solid white;]
  section(id="icons")
    h2.subtitle Проблема иконок
    .component-description__img
      img(src="img/content/scaling-7.gif", width="900", height="416", alt="Демонстрация скейлинга")
    p Вставляя в разметку svg, мы указываем ему ширину и высоту. Чтобы иконка масштабировалась, в стилях мы также должны прописать ей ширину и высоту через выбранную нами функцию.
    .component-description__img
      img(src="img/content/scaling-8.png", width="222", height="139", alt="Демонстрация скейлинга")
    p Но что делать, когда у нас единообразный список, содержащий иконки разного размера?
    p Необходимо вырезать иконки из Figma так, чтобы они были одинакового размера, сохраняя при этому свой первоначальный вид.
    p План действий:
    p 1. Просматриваем все иконки списка и выбираем самое большое значение по ширине и высоте. У нас это значение получилось 43px*42px.
    .component-description__img
      img(src="img/content/scaling-9.gif", width="900", height="416", alt="Демонстрация скейлинга")
    p 2. Создаем фрейм с полученными параметрами, убираем у него белую заливку.
    .component-description__img
      img(src="img/content/scaling-10.png", width="680", height="438", alt="Демонстрация скейлинга")
    .component-description__img
      img(src="img/content/scaling-11.png", width="680", height="256", alt="Демонстрация скейлинга")
    p 3. Выделяем иконку, копируем ее (CTRL + V), становимся на фрейм и вставляем иконку туда (ctrl + c).
    p 4. Иконка помещается внутрь фрейма. Там ее можно передвинуть в нужную сторону, чтобы при вставке в список она смотрела органично.
    .component-description__img
      img(src="img/content/scaling-12.png", width="680", height="396", alt="Демонстрация скейлинга")
    p 5. Но фрейм при экспорте может создавать лишнюю обертку.
    .component-description__img
      img(src="img/content/scaling-13.png", width="680", height="633", alt="Демонстрация скейлинга")
    p Чтобы этого избежать, надо иконку поставить рядом с фреймом. Для этого выделяем фрейм и нажимаем ctrl + g (или кликаем правой кнопкой мышки по фрейму и выбирает Group Selection).
    .component-description__img
      img(src="img/content/scaling-14.png", width="680", height="369", alt="Демонстрация скейлинга")
    p 6. Заходим в созданную группу и ставим в ней нашу иконку над фреймом.
    .component-description__img
      img(src="img/content/scaling-15.png", width="680", height="326", alt="Демонстрация скейлинга")
    .component-description__img
      img(src="img/content/scaling-16.png", width="680", height="326", alt="Демонстрация скейлинга")
    p 7. Теперь экспортируем всю группу - и у нас получилась иконка унифицированного размера.
    p Теперь мы можем в разметке всем иконкам этого списка указать одинаковый размер, а в css задать масштабируемые ширину и высоту.
    .component-description__img
      img(src="img/content/scaling-17.png", width="680", height="467", alt="Демонстрация скейлинга")

