section.component-description(data-tabs='element')
  p При работе над адаптивом сайта мы часто сталкиваемся в проблемой, что некоторые блоки находятся совершенно в разным местах и зачастую имеют совершенно другой порядок, не такой, как был к примеру на десктопном разрешении. Одна из частых проблем - это когда при адаптиве сайта нам нужно перенести блок контактов из шапки сайта в бургерное меню.
  p Данную задачу средствами CSS решить крайне сложно, приходится при адаптиве переопределять порядок элементов, писать много дополнительный свойств, что бы разместить элементы согласно макету.
  p Но порой даже такие манипуляции не приводят к должному результату и нам приходится каждый раз под такие элементы писать на JS код, который при адаптиве будет перемещать блоки в нужные нам места. Это занимает много времени и добавляется много лишнего кода.
  p Компонент динамического адаптива позволит работать с элементами страницы при адаптиве проще, удобнее и быстрее.
  p Функционал динамического адаптива позволяет перемещать необходимые блоки на заданных разрешениях в другие блоки и обратно. При этом не создаются дублирующие элементы, а именно нужный нам элемент перемещается в другой блок, без необходимости перезагружать страницу, а прямо через resize в реальном времени.
  p В файле #[b init-dynamic-adaptive.js] создаётся класс #[b DynamicAdaptive], который записывается в переменную #[b dynamicAdaptive], после чего динамический адаптив инициализируется.
  p Динамический адаптив состоит из следующих файлов: #[b dynamic-adaptive.js] и #[b init-dynamic-adaptive.js] все файлы обязательны к переносу в проект! Файл dynamic-adaptive.scss добавлен только для демонстрации работы компонента, в проект переносить его не нужно
  p В файле #[b init-dynamic-adaptive.js] при инициализации в переменной #[b da] в скобках нужно указать тип медиа запроса при котором будет срабатывать данный компонент: указать #[b min] если вам нужно, что бы срабатывал компонент по принципу #[b min-width] либо #[b max], если по принципу [b max-width]. По умолчанию компонент настроен на #[b max-width].
  h2.subtitle Обязательные data атрибуты
  table
    tr
      th
        p data-da=".block, when, where"
      td
        p Данный атрибут устанавливается на том элементе, который мы хотим переносить в другое место при адаптиве.
  p #[b .block] - сюда мы записываем селектор родительского блока в который хотим переместить наш компонент. При этом селектор может быть любым, но обязательно условие в том, что должен быть символ обозначение селектора. К примеру: по классу - #[b .block], по id - #[b #block], по data атрибуту - <b>[block]</b> и так же можно использовать составные селекторы - <b>.foo .bar [data-buzz]</b>
  p #[b when] - когда мы хотим переместить данный блок. В данное место мы записываем разрешение экрана, при котором должен переместить блок. Момент медиа запроса в данном случае будет зависеть от того параметра, который вы укажите при инициализации данного компонента. К примеру: #[b 767] - так как по умолчание при инициализации у нас указан тип #[b max], то в этом случае элемент переместиться тогда, когда сработает медиа запрос #[b max-width(767px)]
  p #[b where] - на какую позицию внутри указанного блока переместиться элемент. Если не указать данный параметр, то по умолчанию элемент переместиться в конец родителя, на позицию #[b last]. Доступные значения: #[b first], #[b last] или номер позиции начиная с 0. К примеру: #[b data-da=".block, 767, first"] - так элемент переместиться в блок с классом #[b .block] при разрешении ниже #[b 768px] на первое место в этом родителе. Запятые между значениями #[b ОБЯЗАТЕЛЬНЫ!]
